{%- from 'consul/map.jinja' import template_settings with context -%}
{%- set render_settings = { 
   'opts' : [], 
   'logfile' : '/dev/null',
   'pidfile' : '/var/run/consul_template.pid'
   }
-%}

{%- for key, value in template_settings.get('opts').iteritems() -%}
  {%- if value is none -%}
    {%- do render_settings.opts.append('-' ~ key) -%}
  {%- else -%}
    {%- for opt in value -%}
      {%- do render_settings.opts.append('-' ~ key ~ '=' ~ opt) -%}
    {%- endfor -%}
  {%- endif -%}
{%- endfor -%}

{%- if 'pid-file' in template_settings.opts -%}
  {%- do render_settings.update({ 'pidfile' : template_settings.opts['pid-file'][0] }) -%}
{%- endif -%}

{%- if template_settings.log -%}
{% do render_settings.update({ 'logfile' : template_settings.log_dir ~ '/template.log' }) %}
{%- endif -%} 

#!/bin/sh

### BEGIN INIT INFO
# Provides:       consul-template
# Required-Start: $local_fs $network
# Default-Start: 2 3 4 5
# Default-Stop:  0 1 6
# Short-Description: Manage the consul-template agent
# Description: A tool to update and mangage configs with information from Consul
### END INIT INFO

export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
export GOMAXPROCS={{ salt['grains.get']('num_cpus') }}

NAME=consul-template
USER=consul
LOGFILE={{ render_settings.logfile }}
LOCKFILE=/var/lock/subsys/$NAME
PIDFILE={{ render_settings.pidfile }}
CONFIGDIR={{ template_settings.opts['config'][0] }}
DAEMON=/usr/local/bin/$NAME
DAEMON_ARGS=" {{ render_settings.opts|join(' ') }}"

# source function library
. /etc/rc.d/init.d/functions

if [ -f /etc/sysconfig/$NAME ]; then
  . /etc/sysconfig/$NAME
fi

_start() {

  if [ ! -x $DAEMON ]; then
    echo -n $"$DAEMON not found or executable"
    exit 5
  fi

  if [ ! -d $CONFIGDIR ]; then
    echo -n $"$CONFIGDIR not configured. Service cannot start."
    exit 1
  fi

  umask 077

  touch $PIDFILE
  chown $USER:$USER $PIDFILE

  if [ $LOGFILE != /dev/null ]; then
    mkdir -p $(dirname $LOGFILE)
    touch $LOGFILE
    chown -R $USER:$USER $(dirname $LOGFILE)
  fi

  echo -n $"Starting $NAME: $DAEMON"

  daemon                \
    --user=$USER        \
    --pidfile=$PIDFILE  \
    "{ $DAEMON $DAEMON_ARGS &>> $LOGFILE & } ; echo \$! >| $PIDFILE"

  RETVAL=$?
  if [ $RETVAL -eq 0 ]; then
    touch $LOCKFILE
  fi

  echo
  return $RETVAL
}

_stop() {
  echo -n $"Stopping $NAME: $DAEMON"

  killproc -p $PIDFILE $DAEMON -INT

  while true; do
    ss -pl | grep -q -F "((\"$NAME\","
    if [ $? -ne 0 ]; then
      break
    fi
    sleep 0.2
  done

  RETVAL=$?
  echo
  if [ $RETVAL -eq 0 ]; then
    rm -f $LOCKFILE $PIDFILE
  fi

  return $RETVAL
}

_restart() {
  _stop
  _start
}

_reload() {
  echo -n $"Reloading $NAME: $DAEMON"

  killproc -p $PIDFILE $DAEMON -HUP

  echo
}

_force_reload() {
  _restart
}

_status() {
  status -p $PIDFILE -l $NAME $DAEMON
  return $?
}

_status_q() {
  _status > /dev/null 2>&1
}



case "$1" in
  start)
   _status_q && exit 0   
    _start
  ;;
  stop)
    _status_q || exit 0
    _stop
  ;;
  restart)
    _restart
  ;;
  reload)
    _status_q || exit 7
    _reload
  ;;
  force-reload)
    _force_reload
  ;;
  status)
    _status
  ;;
  *)
    echo "Usage: service consul {start|stop|restart|reload|force-reload|status}"
    exit 2
  ;;
esac

exit $?

